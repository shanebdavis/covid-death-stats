import &StandardImport, &Lib, {} &Bar, &Button

isPublicValue = (b) -> b? && (b == 0 || b > 9)
minPrivValue = 1
maxPrivValue = 9

{showFullDetails} = getEnv()

fullDetails = (b) ->
  if b? then b else (maxPrivValue / minPrivValue) /2

valuesSum = (list, canShowAnyValue) ->
  reduce a, b from list inject [0 0] with
    if showFullDetails
      []
        a[0] + if b? then b else minPrivValue
        a[1] + if b? then b else maxPrivValue

    else if canShowAnyValue
      []
        v = a[0] + b
        v

    else
      []
        a[0] + if isPublicValue b then b else minPrivValue
        a[1] + if isPublicValue b then b else maxPrivValue

valuesMax = (list, canShowAnyValue) ->
  reduce a, b from list inject [0 0]
    if showFullDetails
      []
        max a[0], if b? then b else minPrivValue
        max a[1], if b? then b else maxPrivValue

    else if canShowAnyValue
      []
        v = max a[0], b
        v
    else
      []
        max a[0], if isPublicValue b then b else minPrivValue
        max a[1], if isPublicValue b then b else maxPrivValue

class Graph extends ViewStateComponent

  @subscriptions
    :covidData
    :graphState

  @stateFields
    probabilityMode: :relative
    selectedData: null
    showOptionsFor: null
    exampleData: null

  @propFields :animationOn

  applyScale = (scale, obj) ->
    if scale? && scale != 1
      object v, k in obj with v * scale
    else obj

  createSelectedDataEntry = (covidDataRecord, region, age, intentData, mechanismData, scale) ->
    merge
      covidDataRecord
      nonCovid19Deaths: covidDataRecord.totalDeaths - covidDataRecord.covid19Deaths
      applyScale scale, {totalDeaths: totalDeaths2019, accident: accidentDeaths2019, homicide: homicides2019, suicide: suicides2019} = intentData?[region]?[age] ? {}
      applyScale scale, {drowning: drownings2019, motorVehicle: carAccidents2019, disease: diseaseDeaths2019, firearm: firearmDeaths2019, poisoning: poisonings2019, suffocation: suffocationDeaths2019, fall: deathFromFalls2019} = mechanismData?[region]?[age] ? {}

  preprocessState: (newState) ->
    newState.covidData extract? covidData, intentData, mechanismData, times, ages
    newState.graphState extract? region, time, age, graphType
    [aRegion] = region
    [aTime] = time
    [anAge] = age

    [axis] = graphType

    axisKeys = if axis == :time
      switch aTime
      when "All Time"
        array v from times when !/^(All.*|202\d|last.*)$/i.test v
      when "last12Months"
        a = array v from times when !/^(All.*|202\d|last.*)$/i.test v
        a.slice a.length - 13, a.length - 1
      else time
    else
      if anAge == "All Ages"
        array v from ages when !/^All/.test v
      else age

    merge
      newState
      exampleData: createSelectedDataEntry
        covidData.UnitedStates["All Time"]["All Ages"]
        :UnitedStates
        "All Ages"
        intentData
        mechanismData

      selectedData:
        unless covidData
          {}
        else
          if axis == :time
            object aTime from axisKeys
              if region.length > 1
                array aRegion in region
                  createSelectedDataEntry
                    covidData[aRegion][aTime][anAge]
                    aRegion
                    anAge
                    intentData
                    mechanismData
                    1/12

              else
                array anAge in age
                  createSelectedDataEntry
                    covidData[aRegion][aTime][anAge]
                    aRegion
                    anAge
                    intentData
                    mechanismData
                    1/12

          else
            object anAge from axisKeys
              if region.length > 1
                array aRegion in region
                  createSelectedDataEntry
                    covidData[aRegion][aTime][anAge]
                    aRegion
                    anAge
                    intentData
                    mechanismData

              else
                array aTime in time
                  createSelectedDataEntry
                    covidData[aRegion][aTime][anAge]
                    aRegion
                    anAge
                    intentData
                    mechanismData

  valueCalc: (row, numerator, denominator) ->
    n = if numerator == "1" then 1 else row[numerator]
    d = if denominator == "1" then 1 else row[denominator]
    if n? && d?
      n / d
    else null

  @getter
    relative: -> @probabilityMode == :relative
    unit: ->
      switch @probabilityMode
      when :relative then :x
      when :probability then :%
      else ''

    data: ->
      @graphState extract layout, numerator, denominator
      haveDenominator = !(denominator.length == 1 && denominator[0] == "1")
      array rows, label in @selectedData
        [firstRow] = rows

        values =
          if numerator.length > 1
            array n in numerator with @valueCalc firstRow, n, denominator[0]
          else if denominator.length > 1
            array d in denominator with @valueCalc firstRow, numerator[0], d
          else
            array row in rows with @valueCalc row, numerator[0], denominator[0]

        [lowValue, highValue] =
          if layout[0] == :stacked
            valuesSum values, haveDenominator
          else
            valuesMax values, haveDenominator

        {}
          label:
            if m = label.match /(^\d+)-(\d+)$/
              [_, year, month] = m
              "#{months[month|0]}\n#{year}"
            else
              label
              .replace /Under /g 'Under\n'
              .replace /[ ]years/g '\nyears'

          values
          value: (lowValue + highValue) / 2
          valueLabel: if lowValue == highValue then highValue else "#{lowValue} - #{highValue}"

    maxValue: ->
      base =
        reduce a, {value, label}, k from @data inject 0 when !/All|Jan\n2020|Feb\n2020/.test label
          max a, switch
          when isInfinite(value) then 0
          else value

      find v from maxValues when base < v

  renderLabledSection: ({label, items}) ->
    Element
      :row
      animators: opacity: toFrom: 0
      Element
        :column
        childrenMargins: @gridSize * 2
        TextElement
          TextStyles.xLargeBoldText
          :childrenHeightParentWidth
          text: upperCamelCase label, ' '

        ScrollElement
          :clip

          Element
            :flow
            :parentWidthChildrenHeight
            padding: 2
            key: label
            childrenMargins: @gridSize / 2
            array item in items
              Button item

      Button
        action: @clearShowOptionsFor
        Icon icon: :close iconScale: .5

  getOptions: (optionsType) ->
    switch optionsType
    when :graphType then :time :age
    when :layout    then :stacked :adjacent
    when :numerator :denominator then compactFlattenAll :1 Object.keys @exampleData
    when :time        then @covidData.times
    when :region      then @covidData.regions
    when :age         then @covidData.ages

  render: ->
    @ extract maxValue
    @graphState extract layout, numerator, denominator
    hasDenominator = denominator.length > 1 || denominator[0] != "1"
    hasNumerator = numerator.length > 1 || numerator[0] != "1"
    Element
      :column
      childrenMargins: @gridSize * 2
      animators:
        if @animationOn
          location:
            duration: 2
            f: :easeInQuad
            from: xw: -1 y: 0
        else {}

      Element
        Element
          :row :childrenBottomLeft
          animators: opacity: toFrom: 0
          childrenMargins: @gridSize
          array row in @data
            Bar row, {}
              key: row.label
              layout: layout[0]
              maxValue
              @unit
              colorPalette: if hasDenominator && hasNumerator then :color else :grey
              probabilityMode:
                if row.value >= 1
                  if hasDenominator then :relative
                  else :count
                else :probability

      Element
        :row
        padding: top: @gridSize * 4
        childrenMargins: @gridSize * 2

        Element
          :column :childrenTopCenter
          size: w: @gridSize * 10, hh: 1
          childrenMargins: @gridSize / 4
          array option in :graphType :layout :numerator :denominator :region :time :age
            []
              if option == :denominator
                Element
                  size: ww: 1 h: @gridSize
                  Element
                    :centerCenter
                    size: h: 1 ww: 1
                    draw: TextPalette.black.tertiary
              else
                TextElement
                  TextStyles.tinyText
                  padding: v: @gridSize / 2
                  color: TextPalette.black.secondary
                  text: if option == :numerator then :equation else dashCase option

              Button {}
                selected = @showOptionsFor == option
                text:
                  array o in @graphState[option]
                    humanLabel o
                  .join "\n"
                  + if selected then " ▸" else " ▹"
                  .trim()
                action: ->
                  @showOptionsFor = if selected
                    null
                  else option

        Element
          if @showOptionsFor
            @renderLabledSection
              label: @showOptionsFor
              items: array a in order = @getOptions @showOptionsFor
                text: humanLabel a
                selected: a in @graphState[@showOptionsFor]
                action:   (event) ->
                  if event.props.shiftKey
                    models.graphState.multiSelect @showOptionsFor, a, order
                  else
                    models.graphState.select @showOptionsFor, a
          else
            preset = &Presets[@graphState.preset]
            numPresets = &Presets.length
            custom = find v, k in preset.graphState when neq v, @graphState[k]
            Element
              animators: opacity: toFrom: 0
              key: :preset
              :row
              :childrenTopLeft
              childrenMargins: @gridSize * 2

              Element
                :clip
                ScrollElement
                  :centerCenter
                  size: w: @gridSize * 48 max: ww: 1
                  MarkdownView
                    text:
                      if custom
                        """
                          # Custom

                          * Explore the dataset via the legent on the left
                          * Return to the presets by clicking the triangles next to the preset indicator on the right
                      else
                        preset.description
                        .replace /(%(\w+)%)/g, (a, b, c) ->
                          array v in @graphState[c] with humanLabel v
                          .join ", "

              Element
                :row :parentWidthChildrenHeight
                size: w: @gridSize * 14, hch: 1
                childrenMargins: @gridSize
                :childrenCenterRight
                Button
                  action: -> models.graphState.setPreset @graphState.preset - 1
                  Element
                    :row :childrenSize
                    Icon icon: :caretLeft
                TextElement
                  TextStyles.mediumText
                  :childrenSize
                  text: "preset #{@graphState.preset + 1} / #{numPresets}"
                Button
                  action: -> models.graphState.setPreset @graphState.preset + 1
                  Element
                    :row :childrenSize
                    Icon icon: :caretRight
