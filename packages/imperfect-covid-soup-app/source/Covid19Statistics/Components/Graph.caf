import &StandardImport, &Lib, {} &Bar, &Button

class Graph extends ViewStateComponent

  @subscriptions
    :covidData
    :graphState

  @stateFields
    probabilityMode: :relative
    selectedData: null
    showOptionsFor: null

  @propFields :animationOn

  applyScale = (scale, obj) ->
    if scale? && scale != 1
      object v, k in obj with v * scale
    else obj

  createSelectedDataEntry = (covidDataRecord, region, age, intentData, mechanismData, scale) ->
    merge
      covidDataRecord
      nonCovid19Deaths: covidDataRecord.totalDeaths - covidDataRecord.covid19Deaths
      applyScale scale, {totalDeaths: totalDeaths2019, accident: accidentDeaths2019, homicide: homicides2019, suicide: suicides2019} = intentData?[region]?[age] ? {}
      applyScale scale, {drowning: drownings2019, motorVehicle: carAccidents2019, disease: diseaseDeaths2019, firearm: firearmDeaths2019, poisoning: poisonings2019, suffocation: suffocationDeaths2019, fall: deathFromFalls2019} = mechanismData?[region]?[age] ? {}

  preprocessState: (newState) ->
    newState.covidData extract? covidData, intentData, mechanismData
    newState.graphState extract? region, time, xAxis, age

    merge
      newState
      selectedData:
        if xAxis == :time
          object covidDataAgeRecords, time from covidData?[region] when /^\d+-/.test time
            covidDataRecord = covidDataAgeRecords[age]
            createSelectedDataEntry covidDataRecord, region, age, intentData, mechanismData, 1/12
        else
          object covidDataRecord, age from covidData?[region]?[time]
            createSelectedDataEntry covidDataRecord, region, age, intentData, mechanismData

  @getter
    relative: -> @probabilityMode == :relative
    unit: ->
      switch @probabilityMode
      when :relative then :x
      when :probability then :%
      else ''

    data: ->
      array row, label in @selectedData
        label:
          if m = label.match /(^\d+)-(\d+)$/
            [_, year, month] = m
            "#{months[month|0]}\n#{year}"
          else
            label
            .replace /Under /g 'Under\n'
            .replace /[ ]years/g '\nyears'

        value:
          if row[@graphState.top]?
            row[@graphState.top] ? 1
            / row[@graphState.bottom] ? 1
          else null

      # &GraphFunctions.deathRisk @selectedData, {} @probabilityMode
      # []
      #   value: 8.80,   label: "All Ages"
      #   value: 377.8,  label: "Under\n1 year"
      #   value: 141.6,  label: "1-4\nyears"
      #   value: 83.0,   label: "5-14\nyears"
      #   value: 58.7,   label: "15-24\nyears"
      #   value: 28.2,   label: "25-34\nyears"
      #   value: 15.5,   label: "35-44\nyears"
      #   value: 10.5,   label: "45-54\nyears"
      #   value: 9.70,   label: "55-64\nyears"
      #   value: 8.22,   label: "65-74\nyears"
      #   value: 7.75,   label: "75-84\nyears"
      #   value: 8.25,   label: "85+\nyears"

    maxValue: ->
      base =
        reduce a, {value, label}, k from @data inject 0 when !/All|Jan\n2020|Feb\n2020/.test label
          max a, if isInfinite(value) then 0 else value

      find v from maxValues when base < v

  renderLabledSection: ({label, items}) ->
    Element
      :childrenSize :row
      childrenMargins: @gridSize / 2
      TextElement
        TextStyles.tinyText
        size: w: @gridSize * 3, hch: 1
        padding: v: @gridSize / 2
        color: TextPalette.black.primary
        text: label

      Element
        :flow
        :parentWidthChildrenHeight
        childrenMargins: @gridSize / 2
        array item in items
          Button item

  getOptions: (optionsType) ->
    switch optionsType
    when :xAxis   then :age :time
    when :top     then Object.keys find @selectedData
    when :bottom  then compactFlattenAll :1 Object.keys find @selectedData
    when :time    then Object.keys @covidData.covidData.UnitedStates
    when :region  then Object.keys @covidData.covidData
    when :age     then Object.keys find @covidData.covidData.UnitedStates

  render: ->
    @ extract maxValue
    # log {} maxValue, @graphState, @selectedData, @data
    Element
      :column
      childrenMargins: @gridSize * 2
      animators:
        if @animationOn
          location:
            duration: 2
            f: :easeInQuad
            from: xw: -1 y: 0
        else {}

      Element
        :row :childrenBottomLeft
        childrenMargins: @gridSize
        array {value, label} in @data
          Bar {}
            key: label
            value
            label
            maxValue
            @unit
            probabilityMode:
              if value >= 1
                if @graphState.bottom && @graphState.bottom != "1" then :relative
                else :count
              else :probability

      Element
        :column
        padding: top: @gridSize * 4
        childrenMargins: @gridSize / 2

        TextElement
          TextStyles.mediumBoldText
          :childrenSize
          text:
            if @denominator
              "" #{humanLabel @numerator} / #{humanLabel @denominator}
            else
              humanLabel @numerator

        @covidData?.updatedAt && TextElement
          TextStyles.smallText
          color: TextPalette.black.primary
          :childrenSize
          :textTopLeft
          text:
            """
              updated #{} formatDate @covidData.updatedAt, "" mmmm d, yyyy

        Element
          :row
          :parentWidthChildrenHeight
          childrenMargins: @gridSize / 4
          array option in :xAxis :top :bottom :region if @graphState.xAxis == :time then :age else :time
            Button {}
              text: humanLabel @graphState[option] ? 1
              selected = @showOptionsFor == option
              action: ->
                @showOptionsFor = if selected
                  null
                else option

        @showOptionsFor && @renderLabledSection
          label: @showOptionsFor
          items: array a in @getOptions @showOptionsFor
            text:
              if @showOptionsFor == :time
                a
              else humanLabel a
            selected: @graphState[@showOptionsFor] == a
            action:   -> models.graphState[@showOptionsFor] = a
