import &StandardImport

class Home extends ViewStateComponent

  @subscriptions :clock.seconds :covidData

  @stateFields
    startTime: 0
    animationOn: true

  @getter
    timeDelta: -> 10 # @seconds - @startTime

  getInitialState: -> startTime: toSeconds()

  @getter
    step: -> 20 * @timeDelta
    showGraphNow: -> @step > 120

  render: ->

    Element
      draw: #f

      TextElement
        TextStyles.tinyText
        padding: @gridSize
        color: TextPalette.black.secondary
        :childrenSize
        :bottomRight
        text:
          """
            updated #{} formatDate @covidData.updatedAt, "" mmmm d, yyyy

      Element
        padding: @gridSize * 2
        TextElement
          TextStyles.xLargeText
          :childrenSize
          color: TextPalette.black.secondary
          axis: .5
          location: xw: .5 yh: if @step > 30 then 0 else .5
          animators:
            if @animationOn
              location: duration: 3 f: :easeBothQuad
            else {}

          text:
            "" Covid-19 Statistics
            .slice 0, @step

        if @step > 70
          Element
            :centerCenter
            key: :line
            size:
              h: @gridSize / 2
              ww: 1
            animators:
              if @animationOn
                size:
                  duration: 2
                  from: w: 0 h: @gridSize / 2
              else {}
            draw: TextPalette.black.primary

        Element
          if @showGraphNow
            &Graph {} @animationOn

        !@showGraphNow && Element
          on: pointerClick: ->
            @clearAnimationOn()
            @startTime = @seconds - secondsPer.minute * 10

