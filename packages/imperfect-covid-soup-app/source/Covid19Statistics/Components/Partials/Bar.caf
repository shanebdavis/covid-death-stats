import &StandardImport

max = (a, b) ->
  if isInfinite(a) || isInfinite(b)
    Infinity
  else if a > b then a else b

add = (a, b) ->
  if isInfinite(a) || isInfinite(b)
    Infinity
  else a + b

c1 = rgbColor #0f71ed
c2 = rgbColor #ffb270
c3 = rgbColor #ffe96b

barColors =
  grey:
    grey = rgbColor #c
    grey.blend :black, 1 - .85
    grey.blend :black, 1 - .7
    grey.blend :black, 1 - .55
    grey.blend :black, 1 - .40

  color:
    []
      c1
      c1.blend :black, 1 - .85
      c1.blend :black, 1 - .7
      c1.blend :black, 1 - .55
      c1.blend :black, 1 - .40

oneColor = #aca8a8

class Bar extends ViewStateComponent

  @propFields :size :location :numBars :value :values :valueLabel :unit :label :maxValue :probabilityMode :colorPalette :layout

  @stateFields
    mouseIn: null

  setMouseIn: ({target, location}) ->
    @mouseIn = point
      if location.x > target.currentSize.x / 2 then 1 else 0
      bound 0, location.y / target.currentSize.y, 1

  render: ->
    @ extract value, values, layout, label, maxValue

    labelValue = value

    divisor = if isInfinite value then maxValue else value

    bars = array v in values
      if isInfinite v then 1
      else bound 0, v / divisor, 1

    if isInfinite value
      value = maxValue

    colorPalette = barColors[@colorPalette] || barColors.grey

    barWidth = 1 / bars.length
    barTotal = reduce a, b from bars inject 0 with add a, b
    barMax = reduce a, b from bars inject 0 with max a, b when !isInfinite b

    if isInfinite barTotal then barTotal = maxValue

    barSum = 0

    Element

      {}
        @size
        @location
        padding: h: @gridSize / 2
        on:
          mouseIn: @setMouseIn

          mouseOut: ({target, location}) ->
            @setMouseIn {target, location}
            timeout 5 -> @clearMouseIn()

        animators:
          size:     {}
          location: {}
          opacity:  toFrom: 0

        childrenMargins: @gridSize * 2

      :column :childrenBottomCenter

      Element
        Element
          :bottomLeft
          animators:
            size: duration: .25
            draw: duration: .25
          size: ww: 1 hh: min 1, scale = value / maxValue
          draw:
            :clip

            array bar, i in bars
              rectangle:
                if layout == :stacked
                  bar = if barTotal > 0
                    if isInfinite bar
                      maxValue
                    else
                      bar / barTotal

                  else 0

                  barSum += bar
                  barPos = barSum
                  (ps) -> rect 0, (1 - barPos) * ps.y, ps.x, bar * ps.y

                else
                  bar = if barMax > 0
                    if isInfinite bar
                      maxValue
                    else
                      bar / barMax

                  else 0

                  (ps) -> rect
                    ps.x * i * barWidth
                    (1 - bar) * ps.y
                    ps.x * barWidth
                    bar * ps.y

              fill: colorPalette[i % colorPalette.length]

            :reset

          TextElement
            TextStyles.mediumBoldText
            fontSize: bound
              TextStyles.tinyBoldText.fontSize
              TextStyles.mediumBoldText.fontSize * 9 / @numBars
              TextStyles.xLargeBoldText.fontSize

            :childrenSize
            animators: :fontSize
            axis: x: .5 y: 1
            location: xw: .5 y: -@gridSize / 2
            color: TextPalette.black.primary
            text:
              if @valueLabel is String
                @valueLabel
              else if labelValue
                switch @probabilityMode
                when :relative :count then formatNumber labelValue, @unit
                when :probability then formatProbability labelValue, @unit
                else
                  if isInfinite labelValue
                    :infinity
                  else
                    labelValue + @unit
              else '' + labelValue

      Element
        size: h: @gridSize * 2
        TextElement
          TextStyles.smallBoldText
          fontSize: bound
            TextStyles.tinyBoldText.fontSize
            TextStyles.smallBoldText.fontSize * 10 / @numBars
            TextStyles.mediumBoldText.fontSize
          :parentWidthChildrenHeight
          :textCenterCenter
          color: TextPalette.black.secondary
          text: label
