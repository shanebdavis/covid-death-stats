import &StandardImport

getEnv() extract showFullDetails

isMonthKey = (key) -> /^\d\d\d\d[-]\d\d$/.test key

{}
  showFullDetails
  maxDisplayValue = 999999999
  minPrivValue = 1
  maxPrivValue = 9
  months = :_ :Jan :Feb :Mar :Apr :May :Jun :Jul :Aug :Sep :Oct :Nov :Dec

  causesOfDeathKeys =
    :covid19Deaths

    :carAccidents2019
    :drowningAccidents2019
    :poisoningAccidents2019
    :suffocationAccidents2019

    :alzheimersDisease2019
    :cancer2019
    :cerebrovascularDiseases2019
    :diabetesDisease2019
    :heartDiseases2019
    :influenzaPneumonia2019
    :liverDisease2019
    :respiratoryClrdDisease2019

    :homicides2019
    :suicides2019

    :allOtherAccidents2019
    :allOtherDiseases2019

    :allOtherDeaths2019

  humanCausesOfDeathKeys =
    covid19Deaths: :covid19

    carAccidents2019:         :car
    drowningAccidents2019:    :drowned
    poisoningAccidents2019:   :poison
    suffocationAccidents2019: :suffocation

    alzheimersDisease2019:    :alzeimers
    cancer2019:               :cancer
    cerebrovascularDiseases2019:  :cerebrovascular
    diabetesDisease2019:      :diabetes
    heartDiseases2019:        :heart
    influenzaPneumonia2019:   :influenza
    liverDisease2019:         :liver
    respiratoryClrdDisease2019: :respiratory

    homicides2019:            :homicide
    suicides2019:             :suicide

    allOtherAccidents2019:    "" other accident
    allOtherDiseases2019:     "" other disease

    allOtherDeaths2019:       "" other death

  sourcesUrl: :https://github.com/shanebdavis/covid-death-stats/#source-data
  repoUrl: :https://github.com/shanebdavis/covid-death-stats/

  covidDataAgeGroupsToIncludeRegEx =
    ///
      ^
      (
        All |
        Under |
        1-4 |
        \d*5- |
        85
      )

  humanLabel = (p) ->
    if humanCausesOfDeathKeys[p] then humanCausesOfDeathKeys[p]
    else if m = p?.match /(^\d+-\d+) years/i
      "#{m[1]} Years"
    else if m = p?.match /^(\d\d\d\d)-(\d\d)$/
      [_, year, month] = m
      "" #{months[month|0]}, #{year}
    else
      upperCamelCase p, ' '
      .replace /(\d+$)/, " $1"
      .replace /Clrd/, "(CLRD)"

  shortHumanLabel = (p) ->
    humanLabel
      if /^all\s*(time|age)/i.test p then p
      else if /^All/i.test p
        p.replace /^All\s*/i, ''
      else
        p.replace /Pneumonia|Diseases?|Accidents?|Clrd/g, ''

  isPublicValue = (b) -> b? && (b == 0 || b > 9)
  isInfinite = (v) -> !(v < maxDisplayValue)

  nullCheck = (obj, f) ->
    if find v in obj when !v? with true
      null
    else if f is Function
      f obj
    else f

  getMaxNonInfiniteValues = (values) ->
    if values.length > 0
      m = null
      each value in values when !isInfinite value
        m = if m? then max value, m else value
      if m? then m else Infinity

  getSumNonInfiniteValues = (values) ->
    if values.length > 0
      m = null
      each value in values when !isInfinite value
        m = if m? then value + m else value
      if m? then m else Infinity

  valuesSum = (list) -> reduce a, b from list inject 0 with a + b
  valuesMax = (list) -> reduce a, b from list inject 0 with max a, b

  applyScale = (scale, obj) ->
    if scale? && scale != 1
      object v, k in obj with v * scale
    else obj

  createSelectedDataEntry = (covidDataRecord, region, age, time, value) ->
    merge
      {} region, age, time, value
      covidDataRecord

  valueCalc = (row, numerator, denominator) ->
    n = if numerator == "1" then 1 else row[numerator]
    d = if denominator == "1" then 1 else row[denominator]
    if n? && d?
      n / d
    else null

  equationElementHasNon1Value = (values) -> !(values.length == 1 && values[0] == "1")

  hasNumerator    = ({numerator}) -> equationElementHasNon1Value numerator
  hasDenominator  = ({denominator}) -> equationElementHasNon1Value denominator

  getGraphDataElement: (rows, label, graphState) ->
    graphState extract graphType, graphBy, numerator, denominator, age, region

    [firstRow] = rows

    values =
      if numerator.length > 1
        valueLegendLabels = array n in numerator with shortHumanLabel n
        array n in numerator with valueCalc firstRow, n, denominator[0]
      else if denominator.length > 1
        valueLegendLabels = array l in denominator with shortHumanLabel l
        array d in denominator with valueCalc firstRow, numerator[0], d
      else
        valueLegendLabels =
          if graphState.age.length == 1 && graphState.region.length == 1
            valueLegendLabels = array n in numerator with shortHumanLabel n
          else
            array {region, age} in rows
              if graphState.age.length > 1 && graphState.region.length > 1
                "" #{upperCamelCase region, ' '}, #{age}
              else if graphState.age.length > 1
                "" #{age}
              else
                upperCamelCase region, ' '

        array row in rows with row.value ? valueCalc row, numerator[0], denominator[0]

    value =
      if graphType[0] == :stacked
        valuesSum values
      else
        valuesMax values

    {}
      label:
        if graphBy[0] == :causeOfDeath
          humanLabel label
        else if m = label.match /(^\d+)-(\d+)$/
          [_, year, month] = m
          "#{months[month|0]}\n#{year}"
        else
          label
          .replace /Under /g 'Under\n'
          .replace /[ ]years/g '\nyears'

      values
      valueLegendLabels
      value
      valueLabel: if value? then value else 'wyh'
      nonInfiniteValueMax: getMaxNonInfiniteValues values
      nonInfiniteValueSum: getSumNonInfiniteValues values

  getSelectedData: ({covidData: _covidData, graphState}) ->
    _covidData extract? covidData, intentData, mechanismData, baselineDeathData, times, ages, latestYearWindowTimes, latest12MonthTimes
    graphState extract? region, time, age, graphBy
    [aRegion] = region
    [aTime] = time
    [anAge] = age
    [axis] = graphBy

    axisKeys =
      switch axis
      when :time
        switch aTime
        when :allTime           then array v from times when !/^(all.*|202\d|l.*)$/i.test v
        when :latestYearWindow  then latestYearWindowTimes
        when :latest12Months    then latest12MonthTimes
        else time

      # when :causeOfDeath
      #   causesOfDeathKeys

      else
        if anAge == :allAges
          array v from ages when !/^all/i.test v
        else age

    unless covidData
      {}
    else
      switch axis
      when :time
        object aTime from axisKeys
          if region.length > 1
            array aRegion in region
              createSelectedDataEntry
                covidData[aRegion][aTime][anAge]
                aRegion
                anAge
                aTime

          else
            array anAge in age
              createSelectedDataEntry
                covidData[aRegion][aTime][anAge]
                aRegion
                anAge
                aTime

      when :causeOfDeath
        sourceData = covidData[aRegion][aTime][anAge]
        object causeOfDeathKey from causesOfDeathKeys
          []
            createSelectedDataEntry
              sourceData
              aRegion
              anAge
              aTime
              sourceData[causeOfDeathKey]

      else # when :age
        object anAge from axisKeys
          if region.length > 1
            array aRegion in region
              createSelectedDataEntry
                covidData[aRegion][aTime][anAge]
                aRegion
                anAge
                aTime

          else
            array aTime in time
              createSelectedDataEntry
                covidData[aRegion][aTime][anAge]
                aRegion
                anAge
                aTime

  getMonthSequence = ({monthsAgo = 0, totalMonths = 12, date = new Date()}) ->
    month = date.getMonth()
    year  = date.getYear() + 1900
    m = monthsAgo

    while m > 12
      year -= 1
      m -= 12

    month =
      if month < m
        year--
        m -= month
        12 - m

      else
        month - m

    array til totalMonths
      out = "#{year}-#{if month < 9 then '0' else ''}#{month + 1}"
      month++
      if month >= 12
        month = 0
        year++

      out

  loadCovidData: ->
    populateMonthSetAges = (agesByTime, times) ->
      monthsSet =
        array time from times
          {} time, ages: agesByTime[time]

      each {ages} from monthsSet into out = {}
        each stats, age in ages
          ageSum = out[age] ?= {}
          each v, stat in stats
            ageSum[stat] = if stat == :population then v else (ageSum[stat] ? 0) + v

    covidData = null
    accidentalDeathFields =
      :carAccidents2019
      :drowningAccidents2019
      :poisoningAccidents2019
      :suffocationAccidents2019

    diseaseDeathFields =
      :alzheimersDisease2019
      :cancer2019
      :cerebrovascularDiseases2019
      :diabetesDisease2019
      :heartDiseases2019
      :influenzaPneumonia2019
      :liverDisease2019
      :respiratoryClrdDisease2019

    violentDeathFields =
      :homicides2019
      :suicides2019



    merge
      {}
        latestYearWindowTimes = getMonthSequence {} monthsAgo: 13
        latest12MonthTimes    = getMonthSequence {} monthsAgo: 12

      preparedData = &covid-death-stats.getPreparedData()

      numMonths: numMonths = reduce count, v, k from preparedData.covidData.UnitedStates inject 0 when isMonthKey k
        count + 1

      baselineDeathData: baselineDeathData = object d1, region from preparedData.baselineDeathData
        object values, age from d1 with-key if age == "All Ages" then :allAges else age
          sumAccidents2019 = reduce sum, k from accidentalDeathFields inject 0 with sum + values[k] ? 0
          sumDiseases2019 = reduce sum, k from diseaseDeathFields inject 0 with sum + values[k] ? 0
          sumViolence2019 = reduce sum, k from violentDeathFields inject 0 with sum + values[k] ? 0
          values.allOtherAccidents2019 = values.allAccidents2019 - sumAccidents2019
          values.allOtherDiseases2019 = values.allDiseases2019 - sumDiseases2019
          values.allViolentDeaths2019 = sumViolence2019
          values.survivers2019 = values.population2019 - values.allDeaths2019
          values

      covidData:
        covidData = object d1, region from preparedData.covidData
          list = object d2, time from d1 with-key if time == "All Time" then :allTime else time
            reKeyed = object values, age from d2 when covidDataAgeGroupsToIncludeRegEx.test age with-key if age == "All Ages" then :allAges else age
            object values, age from reKeyed
              nonCovid19Deaths = values.totalDeaths - values.covid19Deaths
              baselineDeathDataRegionAge = baselineDeathData[region][age]
              scaler2019 = nonCovid19Deaths / baselineDeathDataRegionAge.allDeaths2019
              merge
                object v from values with if v? then v else minPrivValue # nulls mean 1-9, and we are going to assume 1 (minPrivValue)
                {} nonCovid19Deaths, survivers: values.population - values.totalDeaths
                object v, k from baselineDeathDataRegionAge
                  unless /^(survivers|population)/.test k
                    v * scaler2019 + .5 | 0
                  else v

          list.latest12Months   = populateMonthSetAges list, latest12MonthTimes
          list.latestYearWindow = populateMonthSetAges list, latestYearWindowTimes

          list

      regions:  regions = Object.keys covidData
      times: times =
        compactFlatten []
          :allTime
          arrayWithoutValue
            Object.keys covidData.UnitedStates
            :allTime

      ages:  ages = Object.keys covidData.UnitedStates["2020"]

      valueFields: valueFields =
        :population
        :totalDeaths
        :covid19Deaths
        :nonCovid19Deaths
        :survivers

        :carAccidents2019
        :drowningAccidents2019
        :poisoningAccidents2019
        :suffocationAccidents2019

        :alzheimersDisease2019
        :cancer2019
        :cerebrovascularDiseases2019
        :diabetesDisease2019
        :heartDiseases2019
        :influenzaPneumonia2019
        :liverDisease2019
        :respiratoryClrdDisease2019

        :homicides2019
        :suicides2019

        :allOtherAccidents2019
        :allOtherDiseases2019
        :allAccidents2019
        :allDiseases2019
        :allViolentDeaths2019
        :allOtherDeaths2019
        :allDeaths2019

        :population2019

      graphStateOptions:
        graphBy:      :time :age :causeOfDeath
        graphType:    :stacked :adjacent :oneBar
        numerator:    numerator = compactFlatten [] :1 valueFields
        denominator:  numerator
        time:         times
        region:       regions
        age:          ages

  exportCsv: (selectedData) ->
    rows = compactFlatten array items from selectedData
      array item in items
        object v from item
          if v is Number
            Math.round v
          else v
    columns = object Object.keys rows[0]
    logPromise
      Promise.then -> &downloadCsv(rows, columns)
