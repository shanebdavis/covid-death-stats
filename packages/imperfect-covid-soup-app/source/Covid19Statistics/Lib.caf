import &StandardImport, &ArtAtomic, &DataLib

{}
  toFixedWithTrim = (v, precision) ->
    v = v.toFixed precision
    v.replace
      ///
        ^
        (
          [0-9]+
          (\.[0-9]*[1-9])?
        )
        0*
        $
      '$1'

  formatPercent = (p, highPrecision) ->
    100 * p
    .toFixed
      switch
      # when p < .010001 then 3
      when p < .100001 then 2
      else 1
      + if highPrecision then 1 else 0
    + :%

  formatNumber = (p, unit, highPrecision = false) ->
    if isInfinite p
      :Infinity
    else
      addFixed = if highPrecision then 1 else 0
      a =
        switch
        when p >= 99999999 then "#{commaize Math.round(p / 1000000)}m"
        when p >= 999999 then "#{toFixedWithTrim p / 1000000, 1 + addFixed}m"
        when p >= 99999 then "#{toFixedWithTrim p / 1000, 0 + addFixed}k"
        when p >= 9999 then "#{toFixedWithTrim p / 1000, 1 + addFixed}k"
        when p >= 999 then toFixedWithTrim p, 0 + addFixed
        when p >= 100 then Math.round p
        when float32Eq (p | 0), p then p | 0
        when p >= 10 then toFixedWithTrim p, 1 + addFixed
        when p >= 1 then toFixedWithTrim p, 2 + addFixed
        else formatProbability p, highPrecision

      if unit
        if unit == "x"
          "#{a}#{unit}"
        else
          "#{a} #{unit}"
      else a

  formatProbability = (p, highPrecision = false) ->
    if p < .001001
      "1:#{formatNumber 1/p, null, highPrecision}"
    else
      formatPercent p, highPrecision

  maxValues =
    compactFlatten
      array s from -7 til 12
        array m in 1 2.5 5
          m * Math.pow 10, s

  commaAnd = (list) ->
    if list.length > 1
      last = peek list
      list.slice 0, list.length - 1
      .join ', '
      + " and #{last}"
    else list.join ', '

  primaryColor = rgbColor #107aff

  barColors =
    grey:
      grey = rgbColor #c
      grey.blend :black, 1 - .85
      grey.blend :black, 1 - .60
      grey.blend :black, 1 - .5
      # grey.blend :black, 1 - .40

    color:
      []
        primaryColor
        primaryColor.blend :black, 1 - .85
        primaryColor.blend :black, 1 - .60
        primaryColor.blend :black, 1 - .35
