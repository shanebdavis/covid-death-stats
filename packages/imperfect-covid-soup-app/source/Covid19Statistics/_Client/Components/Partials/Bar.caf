import &StandardImport

max = (a, b) ->
  if isInfinite(a) || isInfinite(b)
    Infinity
  else if a > b then a else b

add = (a, b) ->
  if isInfinite(a) || isInfinite(b)
    Infinity
  else a + b

oneColor = #aca8a8

class Bar extends ViewStateComponent

  @propFields
    :size :location :numBars
    :value :values
    :valueLabel
    :unit
    :label
    :maxValue
    :colorPalette
    :layout
    :setHoveredBar
    :barXPadding

  @stateFields
    mouseIn: null

  setMouseIn: ({target, location}) ->
    @mouseIn = point
      if location.x > target.currentSize.x / 2 then 1 else 0
      bound 0, location.y / target.currentSize.y, 1

  render: ->
    @ extract value, values, layout, label, maxValue, colorPalette

    labelValue = value

    divisor = if isInfinite value then maxValue else value

    bars = array v in values
      if isInfinite v then 1
      else bound 0, v / divisor, 1

    if isInfinite value
      value = maxValue

    barWidth = 1 / bars.length
    barTotal = reduce a, b from bars inject 0 with add a, b
    barMax = reduce a, b from bars inject 0 with max a, b when !isInfinite b

    if isInfinite barTotal then barTotal = maxValue

    barSum = 0

    Element

      {}
        @size
        @location
        on:
          mouseIn: -> @setHoveredBar @props
          mouseOut: -> @setHoveredBar null

        animators:
          size:     duration: .25
          location: duration: .25
          opacity:  toFrom: 0 duration: .25

        childrenMargins: @gridSize * 2

      :column :childrenBottomCenter

      Element
        padding: h: @barXPadding
        Element
          :bottomLeft
          animators:
            size: duration: .25
            draw: duration: .25
          size: ww: 1 hh: min 1, scale = value / maxValue
          draw:
            :clip

            array bar, i in bars by -1
              rectangle:
                if layout == :stacked
                  bar = if barTotal > 0
                    if isInfinite bar
                      maxValue
                    else
                      bar / barTotal

                  else 0

                  barSum += bar
                  barPos = barSum
                  (ps) -> rect 0, (1 - barPos) * ps.y, ps.x, bar * ps.y

                else
                  bar = if barMax > 0
                    if isInfinite bar
                      maxValue
                    else
                      bar / barMax

                  else 0

                  (ps) -> rect
                    ps.x * i * barWidth
                    (1 - bar) * ps.y
                    ps.x * barWidth
                    bar * ps.y

              fill: colorPalette[i % colorPalette.length]

            :reset

          TextElement
            TextStyles.mediumBoldText
            fontSize: bound
              TextStyles.tinyBoldText.fontSize
              TextStyles.mediumBoldText.fontSize * 9 / @numBars
              TextStyles.xLargeBoldText.fontSize

            :childrenSize
            animators: fontSize: duration: .25
            axis: x: .5 y: 1
            location: xw: .5 y: -@gridSize / 2
            color: TextPalette.black.primary
            text:
              if @valueLabel is String
                @valueLabel
              else formatNumber labelValue, @unit

      Element
        size: h: @gridSize * 2
        TextElement
          TextStyles.smallBoldText
          animators: fontSize: duration: .25
          fontSize: bound
            TextStyles.tinyBoldText.fontSize
            TextStyles.smallBoldText.fontSize * 10 / @numBars
            TextStyles.mediumBoldText.fontSize
          :parentWidthChildrenHeight
          :textCenterCenter
          color: TextPalette.black.secondary
          text: label
