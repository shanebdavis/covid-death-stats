import &StandardImport

class Legend extends ViewStateComponent

  @subscriptions :graphState

  @propFields :showOptionsFor :setShowOptionsFor

  action: -> models.graphState.invertEquation()

  renderOption: (option) ->
    []
      if option == :denominator
        VinculumBar {} @action

      else
        TextElement
          TextStyles.tinyText
          padding: v: @gridSize / 2
          color: TextPalette.black.secondary
          text: if option == :numerator then :equation else dashCase option

      Button {}
        parentWidth: true
        selected = @showOptionsFor == option
        text:
          array o in @graphState[option]
            shortHumanLabel o

          .join "\n"
          + if selected then " ▸" else " ▹"
          .trim()
        action: ->
          @setShowOptionsFor if selected
            null
          else option

  render: ->
    Element
      :column
      if @isPhone then :parentWidthChildrenHeight
      else
        # padding: v: @gridSize
        draw:
          radius: 5
          outline: TextPalette.black.quaternary

      TextElement
        TextStyles.smallBoldText
        padding: @gridSize
        color: TextPalette.black.secondary
        text: "" edit graph

      if @isPhone
        Element
          :row
          :parentWidthChildrenHeight
          childrenMargins: @gridSize
          Element
            :column :childrenTopCenter
            :parentWidthChildrenHeight
            childrenMargins: @gridSize / 4
            array option in :numerator :denominator :graphType :layout
              @renderOption option
          Element
            :column :childrenTopCenter
            :parentWidthChildrenHeight
            childrenMargins: @gridSize / 4
            array option in :region :time :age
              @renderOption option

      else
        Element
          # padding: h: -@gridSize, bottom: -@gridSize
          ScrollerWithBar2
            :column :childrenTopCenter
            :clip
            alwaysShowBarIfNeeded: true
            padding: h: @gridSize, bottom: @gridSize
            childrenMargins: @gridSize / 4

            array option in :numerator :denominator :region :time :age :graphType :layout
              @renderOption option
