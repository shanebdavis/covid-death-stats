import &ArtSuite, &DataLib

defaults =
  region:       [] :UnitedStates
  time:         [] :latestYearWindow
  numerator:    [] :1
  denominator:  [] :1
  age:          [] :allAges
  graphType:    [] :age
  layout:       [] :adjacent

envProps = getEnv()

class GraphState extends ApplicationState

  @stateFields merge
    defaults
    each v, k in defaults when envProps[k]
      v.split ","

    inColor:      false
    custom:       false
    preset:       0
    presetData:   &Presets[0]
    numerator:    [] :covid19Deaths
    specialStatistic:
      value: 1/500000
      label: "" struck by lightning
    &Presets[0].graphState

  mergeInState: (f) ->
    @setState (state) ->
      @postprocessState merge state, f state

  postprocessState: (state) ->
    state =
      # BUG: can't support stacked when more than one denominator right now
      if state.denominator?.length > 1
        log.warn "" Due to a bug, we can't show Stacked values with multiple denominators.
        merge state, layout: [] :adjacent

      else state

    merge state, {}
      custom = find v, k in state.presetData?.graphState when neq v,state[k]
      inColor: hasDenominator(state) && hasNumerator(state)

  select: (type, value) ->
    @mergeInState ->
      [type]: [] value

  invertEquation: ->
    @mergeInState (state) ->
      numerator:    @denominator
      denominator:  @numerator

  multiSelect: (type, value, order) ->
    @mergeInState (state) ->
      # only numerator or denominator can have > 1 selected
      switch type
      when :denominator then numerator:   [] state.numerator[0]
      when :numerator   then denominator: [] state.denominator[0]

      [type]:
        if value in currentSelected = state[type]
          if state[type].length > 1
            arrayWithoutValue currentSelected, value
          else defaults[type]
        else
          arrayWith currentSelected, value
        .sort (a, b) ->
          if order
            if 0 <= aIndex = order.indexOf a
              if 0 <= bIndex = order.indexOf b
                aIndex - bIndex
              else
                1
            else if b in order
              -1
          else
            a.localeCompare b

  setPreset: (presetNumber) ->
    @mergeInState (state) -> merge
      {}
        preset = presetNumber %% &Presets.length
        presetData = &Presets[preset]

      presetData.graphState