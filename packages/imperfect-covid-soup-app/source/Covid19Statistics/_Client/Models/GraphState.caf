import &ArtSuite, &DataLib

defaults =
  region:       [] :UnitedStates
  time:         [] :latestYearWindow
  numerator:    [] :1
  denominator:  [] :1
  age:          [] :allAges
  graphBy:    [] :age
  layout:       [] :adjacent

envProps = getEnv()

class GraphState extends ApplicationState

  constructor: ->
    global.onpopstate = ({state}) -> @setState merge
      if state.preset?
        presetData: &Presets[0]
      state

    @onNextReady ->
      @mergeInState ->
        object _, k in defaults when envProps[k]
          envProps[k].split ","

  @stateFields merge
    defaults

    inColor:      false
    custom:       false
    preset:       preset = if envProps.page? then (envProps.page | 0) - 1 else 0
    presetData:   &Presets[preset]
    numerator:    [] :covid19Deaths
    specialStatistic:
      value: 1/500000
      label: "" struck by lightning

    &Presets[preset].graphState


  createParams = (state) ->
    state extract preset
    presetGraphState = &Presets[preset].graphState
    global.document.location.origin
    + global.document.location.pathname + "?" +
      compactFlattenAll
        "page=#{state.preset + 1}"
        array key in Object.keys defaults when neq state[key], presetGraphState[key] ? defaults[key]
          "" #{key}=#{state[key].join(",").replace(/[ ]/g, "%20")}
      .join :&

  resetPreset: ->
    if @presetData extract? graphState
      @mergeInState graphState

  mergeInState: (f, first) ->
    unless f is Function
      newState = f
      f = -> newState
    @setState (state) ->
      state = @postprocessState merge state, f state
      unless first
        global.history.pushState state, "Covid-19 Death Statistics", createParams state
      state

  postprocessState: (state) ->

    # BUG: can't support stacked when more than one denominator right now
    if state.denominator?.length > 1
      log.warn "" Due to a bug, we can't show Stacked values with multiple denominators.
      state = merge state, layout: [] :adjacent

    if find field in compactFlattenAll state.numerator, state.denominator when /2019/.test field
      time =
        array time in state.time when /^(latestYearWindow|latest12Months|2020)$/.test time
      if time.length == 0 then time = [] :latestYearWindow

      state = merge state,
        graphBy: [] :age
        time: time

    merge state, {}
      custom = !!find v, k in state.presetData?.graphState when neq v, state[k]
      inColor: hasDenominator(state) && hasNumerator(state)

  select: (type, value) ->
    @mergeInState ->
      [type]: [] value

  invertEquation: ->
    @mergeInState (state) ->
      numerator:    @denominator
      denominator:  @numerator

  multiSelect: (type, value, order) ->
    @mergeInState (state) ->
      # only numerator or denominator can have > 1 selected
      switch type
      when :denominator then numerator:   [] state.numerator[0]
      when :numerator   then denominator: [] state.denominator[0]

      [type]:
        if value in currentSelected = state[type]
          if state[type].length > 1
            arrayWithoutValue currentSelected, value
          else defaults[type]
        else
          arrayWith currentSelected, value
        .sort (a, b) ->
          if order
            if 0 <= aIndex = order.indexOf a
              if 0 <= bIndex = order.indexOf b
                aIndex - bIndex
              else
                1
            else if b in order
              -1
          else
            a.localeCompare b

  setPreset: (presetNumber) ->
    @mergeInState (state) -> merge
      {}
        preset = presetNumber %% &Presets.length
        presetData = &Presets[preset]

      presetData.graphState