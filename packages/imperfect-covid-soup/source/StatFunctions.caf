import &StandardImport

nullCheck = (obj, f) ->
  if find v in obj when !v? with true
    null
  else if f is Function
    f obj
  else f

formatRelative = (p) -> p.toFixed if p < 1 then 3 else if p < 10 then 2 else 1
formatOdds = (p) ->
  "" 1:#{}
    if p == 0
      "999,999,999"
    else commaize round(1/p) | 0
formatProbability = (p) -> "#{(100*p).toFixed 4}%"

buildCodCompareFunction = (field) ->
  argument: "" [one or more specific #{field} fields to show - default: all]
  description:
    ""
      Absolute probability of death due to non-covid causes of death by #{capitalize field} (2019 data).
      Combine with `--relatve` option to compare how much more likely each non-covid cause is compared to covid.
      Combine with `--odds` to display the absolute odds of each cause of death.

  f: (stats, options) ->
    codOption = options[field]
    {odds, relative, relativeOdds} = options
    codData = stats[field]
    statsWeCareAbout = {covid19Deaths, population} = stats
    if codData
      covidDeathProbability = covid19Deaths / population
      codPopulation = codData.population

      m =
        object v, k in codData when k != :population && k != :totalDeaths
          deathProbability = v / codPopulation
          if relative
            formatRelative deathProbability / covidDeathProbability

          else if odds
            formatOdds deathProbability

          else formatProbability deathProbability

      if codOption?.length > 0
        m = object key from compactFlattenAll codOption with m[key]

      nullCheck
        statsWeCareAbout
        m

totalDeathRisk:
  description: "" Total probability of dying during. Combine with --odds for odds of dying. Combine with --relative for relative probability of dying vs dying of covid.
  f: (stats, options) ->
    nullCheck
      if options.relative then {population, covid19Deaths, totalDeaths} = stats
      else {population, totalDeaths} = stats

      if options.odds
        formatOdds totalDeaths / population
      else if options.relative
        formatRelative totalDeaths / covid19Deaths
      else
        formatProbability totalDeaths / population

covidDeathRisk:
  description: "" The probability of dying dying of Covid-19. Combine with --odds for the odds of dying by covid.
  f: (stats, {odds}) ->
    nullCheck
      {population, covid19Deaths} = stats
      if odds
        formatOdds covid19Deaths / population
      else
        formatProbability covid19Deaths / population

increasedRiskDueToCovid:
  description:  "" Increased disk of death due to covid-19 as a percentage. This is the RELATIVE increased risk of death over all other kinds of death. Lower is better.
  f: (stats) -> nullCheck
    {totalDeaths, covid19Deaths} = stats
    if totalDeaths > covid19Deaths
      "" #{(100 * covid19Deaths / (totalDeaths - covid19Deaths)).toFixed 2}%
    else :0.00%

nonCovidDeathRisk:
  description: "" If you died, the probability that it was something other than covid compared to the proability it was covid. i.e. "5 times more likely to die of XYZ than covid"
  f: (stats, {odds, relative}) ->
    nonCovidDeaths = stats.totalDeaths - stats.covid19Deaths

    nullCheck
      {population, totalDeaths, covid19Deaths} = stats
      if odds
        formatOdds nonCovidDeaths / population
      else if relative
        formatRelative nonCovidDeaths / covid19Deaths
      else
        formatProbability nonCovidDeaths / population

intent:
  buildCodCompareFunction :intent

mechanism:
  buildCodCompareFunction :mechanism

## "expectedYearsBeforeMoreThan#{round(100 * expectedYearsPercent)|0}PercentChanceOfCovidDeath":
expectedYears:
  argument: "[1% to 100% - default: 50%]"
  default: "50%"
  description:
    ""
      The expected number of years before the death-risk due to covid-19 exceeds the provided percentage.
      This assumes the chance of covid-19 dead the is same year after year.
      Higher is better.

  f: (stats, {expectedYearsPercent, time}) -> nullCheck
    {totalDeaths, covid19Deaths, population} = stats
    ->
      absoluteCovidDeathRisk = covid19Deaths / population
      yearsSurvivalDivisor = if /^\d+$/.test(time) then 1 else 12
      if covid19Deaths == 0
        null
      else
        commaize Math.floor (Math.log(1 - expectedYearsPercent) / Math.log(1 - absoluteCovidDeathRisk)) / yearsSurvivalDivisor
