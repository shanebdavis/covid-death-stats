import &ArtStandardLib, &Source/LoadData

colors =
  :green
  :blue
  :yellow
  :magenta

require :@art-suite/cli
.start
  description:
    """
      US Covid Death Statistics vs US Population

      It's impossible to know the risks without knowing the denomiator.

      When told "Three people turned pink last year," should you be concerned? Well, if you are on Mars and there are only 4 people total, yes, you should be concerned. Your odds are 75% that you'll turn pink. However, if you are on Earth, 3 out of 7.9 billion. You're more likely to win the Lottery 550 times.

  commands:
    json:
      description: "" Output all data as JSON
      run: ->
        Promise.deepAll {}
          covidData: mergedData()
          intentData()
          mechanismData()

        .then JSON.stringify

    numbers:
      description: "" Show the numbers
      options: merge
        &StatFunctions
        chart:
          argument: "" [one or more explicit values to graph; has smart defaults]
          description: "" Show charts in addition to numbers.

        skip:
          argument: :number
          description: "" skip the first N rows of output
        height:
          argument: :lines
          description: "" The hight of the graph in console lines
        short:
          argument: :number
          description: "" stop short N rows of output
        age:
          """
            Select age-range. Can specify a partial name and the first match will be used. Valid age ranges:

            #{} formattedInspect validAgeRanges = []
              "All Ages"
              "Under 1 year"
              "0-17 years"
              "1-4 years"
              "5-14 years"
              "15-24 years"
              "18-29 years"
              "25-34 years"
              "30-39 years"
              "35-44 years"
              "40-49 years"
              "45-54 years"
              "50-64 years"
              "55-64 years"
              "65-74 years"
              "75-84 years"
              "85 years and over"

        odds:     "" Show odds rather than probabilities.
        relative: "" Compare probabilities to covid-death probabilities. e.g.. probability A is 9x more likely than the probability of covid-death

        state:
          """
            Select UnitedStates or a specific state. Can specify a partial name and the first match will be used. For example: `--state wash` will select Washington state. Valid options:

            #{}
              validStates = compactFlattenAll
                :UnitedStates :Alabama :Alaska :Arizona :Arkansas :California :Colorado
                :Connecticut :Delaware :DistrictOfColumbia :Florida :Georgia :Hawaii
                :Idaho :Illinois :Indiana :Iowa :Kansas :Kentucky :Louisiana :Maine
                :Maryland :Massachusetts :Michigan :Minnesota :Mississippi :Missouri
                :Montana :Nebraska :Nevada :NewHampshire :NewJersey :NewMexico :NewYork
                :NorthCarolina :NorthDakota :Ohio :Oklahoma :Oregon :Pennsylvania
                :RhodeIsland :SouthCarolina :SouthDakota :Tennessee :Texas :Utah :Vermont
                :Virginia :Washington :WestVirginia :Wisconsin :Wyoming

              .join ", "
        time:
          """
            Select year or month. Valid options:

            2020, 2021, 2020-01, 2020-02, 2020-03, 2020-04, 2020-05, 2020-06, 2020-07, 2020-08, 2020-09, 2020-10, 2020-11, 2020-12, 2021-01, 2021-02, 2021-03, 2021-04, 2021-05, 2021-06, 2021-07, 2021-08

      run: (options) ->
        {state, time, age, chart, expectedYears, skip: _skip, short: _short, height = 20} = options
        if _skip? || _short?
          _skip ?= 0
          _short ?= 0

        if expectedYears?
          expectedYears = :50% if !expectedYears.match? /(\d*\.)?\d+/
          [n] = expectedYears.match /(\d*\.)?\d+/
          expectedYearsPercent = bound .01, (n | 0) / 100, 1

        else expectedYears = null

        options = merge options, {} expectedYearsPercent

        if state
          stateRegExp = ///i #{state}
          state = find s in validStates when
            stateRegExp.test s

        if age
          ageRegExp = ///i #{age}
          age = find a in validAgeRanges when
            ageRegExp.test a

        if time == 2021 && expectedYears
          log.warn "" Cannot use `expectedYears` for all of 2021 since 2021 isn't complete yet. Try 2020, or a specific month like: 2021-08.
          expectedYears = null

        prepareRow = (row) ->
          row extract population, totalDeaths, covid19Deaths
          absoluteCovidDeathRisk = covid19Deaths / population
          yearsSurvivalDivisor = if /^\d+$/.test(time) then 1 else 12
          merge
            {population, totalDeaths, covid19Deaths} = row
            object {f}, k in &StatFunctions when options[k] and k != :intent && k != :mechanism
              f row, options
            &StatFunctions.intent.f row, options if options.intent
            &StatFunctions.mechanism.f row, options if options.mechanism

        preparedData()
        .then ({covidData, intentData, mechanismData}) ->
          merge {}
            time: time ? if !age? then :2020
            age
            state: state ? "" All United States
            data:
              if age && !time
                object data, k from covidData[state = upperCamelCase state ? :UnitedStates] when !/^\d+$/.test k
                  prepareRow merge data[age], intent: intentData[state][age], mechanism: mechanismData[state][age]

              else
                covidData = covidData[state = upperCamelCase state ? :UnitedStates][time ?= :2020]
                object row, ageRange from covidData when
                    !age? || age == ageRange
                    && !chart || !/All Ages|0-17|18-29|^\d0-/.test ageRange

                  prepareRow merge row, intent: intentData[state][ageRange], mechanism: mechanismData[state][ageRange]

        .then (resolvedData) ->
          if _skip?
            keys = Object.keys(resolvedData.data)
            merge resolvedData,
              data: object k, i from keys.slice _skip, keys.length - _short
                resolvedData.data[k]
          else resolvedData

        .then (resolvedData) ->
          if chart
            plots = if chart != true then compactFlatten [chart]
            else array v, k in &StatFunctions when options[k] with k
            if plots.length == 0 then plots = :covid19Deaths :totalDeaths

            log &asciichart.plot
              array k in plots
                compactFlatten array row, i in array resolvedData.data
                  v = row[k] ? 0
                  if /[:]/.test v
                    [a, v] = v.split ":"

                  if /,|%/.test v
                    v = v.replace /,|%/g ''

                  v = v - 0
                  array til 4 with v
              height: height
              colors: array color in colors
                &asciichart[color]

            resolvedData = merge
              x-axis:
                if age && !time
                  :months
                else
                  :age
              y-axis:
                array plot, i in plots
                  &chalk[colors[i]] plot
                .join ', '

              resolvedData

          resolvedData