import &ArtStandardLib, &Source/LoadData

require :@art-suite/cli
.start
  description:
    """
      US Covid Death Statistics vs US Population

      It's impossible to know the risks without knowing the denomiator.

      When told "Three people turned pink last year," should you be concerned? Well, if you are on Mars and there are only 4 people total, yes, you should be concerned. Your odds are 75% that you'll turn pink. However, if you are on Earth, 3 out of 7.9 billion. You're more likely to win the Lottery 550 times.

  commands:
    states:
      description: "" Show valid state names
      run: ->
        mergedData()
        .then (data) ->
          Object.keys data.UnitedStates

    json:
      description: "" Output all data as JSON
      run: ->
        mergedData()
        .then JSON.stringify

    csv:
      description: "" Output all data as CSV
      run: ->
        mergedData()
        .then (data) ->
          compactFlatten
            # data[state = upperCamelCase state ? :UnitedStates][time ?= :2021]
            array d1 in data


    numbers:
      description: "" Show the numbers
      options:
        odds: "" The odds of dying of anything and the odds of dying of covid-19.
        absoluteRisk:   "" Percentage chance of death and death by covid-19. This is also the ABSOLUTE increased risk of death..
        increasedRisk:  "" Increased disk of death due to covid-19 as a percentage. This is the RELATIVE increased risk of death over other kinds of death
        relativeOdds:   "" If you died, the odds you died of covid-19. I.E. The number of times more likely to die of something else other than covid-19.
        expectedYears:
          argument: "1% to 100%"
          description: "" The expected number of years before the death-risk due to covid-19 exceeds the proved percentage
        state:
          """
            Select UnitedStates or a specific state. Valid options:

            #{}
              []
                :UnitedStates
                :Alabama
                :Alaska
                :Arizona
                :Arkansas
                :California
                :Colorado
                :Connecticut
                :Delaware
                :DistrictOfColumbia
                :Florida
                :Georgia
                :Hawaii
                :Idaho
                :Illinois
                :Indiana
                :Iowa
                :Kansas
                :Kentucky
                :Louisiana
                :Maine
                :Maryland
                :Massachusetts
                :Michigan
                :Minnesota
                :Mississippi
                :Missouri
                :Montana
                :Nebraska
                :Nevada
                :NewHampshire
                :NewJersey
                :NewMexico
                :NewYork
                :NorthCarolina
                :NorthDakota
                :Ohio
                :Oklahoma
                :Oregon
                :Pennsylvania
                :RhodeIsland
                :SouthCarolina
                :SouthDakota
                :Tennessee
                :Texas
                :Utah
                :Vermont
                :Virginia
                :Washington
                :WestVirginia
                :Wisconsin
                :Wyoming
              .join ", "
        time:
          """
            Select year or month. Valid options:

            2020, 2021, 2020-01, 2020-02, 2020-03, 2020-04, 2020-05, 2020-06, 2020-07, 2020-08, 2020-09, 2020-10, 2020-11, 2020-12, 2021-01, 2021-02, 2021-03, 2021-04, 2021-05, 2021-06, 2021-07, 2021-08
      run: ({state, time, odds, absoluteRisk, increasedRisk, relativeOdds, expectedYears}) ->
        if expectedYears?
          expectedYears = :50% if !expectedYears.match? /(\d*\.)?\d+/
          [n] = expectedYears.match /(\d*\.)?\d+/
          percent = bound .01, (n | 0) / 100, 1

        else expectedYears = null

        if time == 2021
          log.warn "" Cannot use `expectedYears` for all of 2021 since 2021 isn't complete yet. Try 2020, or a specific month like: 2021-08.
          expectedYears = null

        preparedData()
        .then (data) ->
          data = data[state = upperCamelCase state ? :UnitedStates][time ?= :2021]
          {}
            state, time
            data: object row from data
              row extract population, totalDeaths, covid19Deaths
              absoluteCovidDeathRisk = covid19Deaths / population
              yearsSurvivalDivisor = if /^\d+$/.test(time) then 1 else 12
              merge
                row
                if odds
                  covidDeathOdds: "" 1:#{} round(population/covid19Deaths) | 0
                  totalDeathOdds: "" 1:#{} round(population/totalDeaths) | 0
                if absoluteRisk
                  absoluteCovidDeathRisk: "" #{(100* absoluteCovidDeathRisk).toFixed 4}%
                  absoluteTotalDeathRisk: "" #{(100 * totalDeaths / population).toFixed 4}%
                if increasedRisk
                  increasedRiskDueToCovid: "" #{(100 * covid19Deaths / (totalDeaths - covid19Deaths)).toFixed 2}%
                if relativeOdds
                  relativeOddsOfCovidDeath: "" 1:#{} round(totalDeaths / covid19Deaths) | 0
                if expectedYears
                  "expectedYearsBeforeMoreThan#{round(100 * percent)|0}PercentChanceOfCovidDeath":
                    if covid19Deaths == 0
                      "" 1,000,000,000
                    else
                      commaize Math.floor (Math.log(1 - percent) / Math.log(1 - absoluteCovidDeathRisk)) / yearsSurvivalDivisor


